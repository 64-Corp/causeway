{
  "name": "grunt-jsdox",
  "description": "Recursively generates markdown files for your project, using the jsDox parser.  Optionally generates a table of contents, and supports git",
  "version": "0.1.4",
  "homepage": "https://github.com/mmacmillan/grunt-jsdox",
  "author": {
    "name": "Mike MacMillan",
    "email": "mikejmacmillan@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mmacmillan/grunt-jsdox.git"
  },
  "bugs": {
    "url": "https://github.com/mmacmillan/grunt-jsdox/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/mmacmillan/grunt-jsdox/blob/master/LICENSE-MIT"
    }
  ],
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "jsdox": ">=0.2.5",
    "lodash": "^2.4.1",
    "q": "^1.0.1"
  },
  "devDependencies": {
    "grunt": "0.4.x",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-jshint": "~0.6.0",
    "grunt-contrib-nodeunit": "~0.2.0"
  },
  "peerDependencies": {
    "grunt": "~0.4.x"
  },
  "keywords": [
    "grunt",
    "gruntplugin",
    "jsdox"
  ],
  "readme": "# grunt-jsdox\n\n> Recursively generates markdown files for your project, using the jsDox parser.  Optionally generates a table of contents, and supports git\n\n## Getting Started\nThis plugin requires Grunt `~0.4.2`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-jsdox --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-jsdox');\n```\n\n## The \"jsdox\" task\n\n### Overview\n\nThe `grunt-jsdox` plugin will recursively generate markdown documentation for all the `src` paths defined using the [jsDox](http://jsdox.org) module, outputting to the configured `dest`.\n\nIf `contentsEnabled` is _true_, a table of contents will also be generated with links to all of the files documented, sorted and grouped by the containing folder.\n\nIf configured, you can also publish the output of the documentation generation task to a remote git repo using the `publish` task.  This is useful for auto-publishing the\ndocumentation for a project, for ex. to your github/bitbucket wiki, as part of the grunt build process.\n\nIn your project's Gruntfile, add a section named `jsdox` to the data object passed into `grunt.initConfig()`.\n\n\n**Full Configuration** (defines each option)\n```js\ngrunt.initConfig({\n  jsdox: {\n    generate: {\n      options: {\n        contentsEnabled: true,\n        contentsTitle: 'Example Documentation',\n        contentsFile: 'readme.md',\n        pathFilter: /^example/\n      },\n\n      src: ['path/to/code'],\n      dest: 'path/to/output'\n    },\n\n    [optional additional \"generation\" task like generate above, can be targed with jsdox:generate-other-docs],\n\n    publish: {\n      enabled: true,\n      path: '<%= jsdox.generate.dest %>',\n      message: 'Markdown Auto-Generated for version <%= pkg.version %>',\n      remoteName: 'upstream'\n      remoteBranch: 'master'\n    }\n  }\n});\n```\n\n**Minimal Configuration** (falls back on defaults)\n\n```js\ngrunt.initConfig({\n  jsdox: {\n    generate: {\n      options: {\n        contentsTitle: 'My Project Documentation',\n      },\n\n      src: ['path/to/code'],\n      dest: 'path/to/output'\n    }\n  }\n});\n```\n\n\n### Options\n\n#### Generation Task Options\n\n**contentsEnabled**\n\nType: `Boolean`\nDefault value: `true`\n\nWhen _true_, the table of contents file (readme.md by default) is generated at the `dest` root\n\n\n**contentsTitle**\n\nType: `String`\nDefault value: `Documentation`\n\nThe title of the table of contents file\n\n\n**contentsFile**\n\nType: `String`\nDefault value: `readme.md`\n\nThe name of the table of contents file that is generated\n\n\n**pathFilter**\n\nType: `RegExp`\n\nIf defined, will filter the final path for each file generated.  Ex, if the `src` included the following path containing moduleA,\n`/path/to/code`, then the path to moduleA in the table of contents will be `path/to/code/moduleA`.  If a `filterPath` of `/path\\/to/`\nis defined, then the path to moduleA in the table of contents will be `code/moduleA`.  This helps avoid unnecessary deep paths, if the\ncode being documented is buried.\n\n\n**src**\n\nType: `Array`\n\nAn array of paths to the documents who's folder should be included in the documentation generation\n\n\n**dest**\n\nType: `String`\n\nThe destination path for the generated documentation\n\n\n\n\n#### Publish Task Options\n\n**enabled**\n\nType: `Boolean`\nDefault value: `false`\n\nWhen _true_, publishing to a remote git repo is enabled\n\n\n**path**\n\nType: `String`\n\nThe path from the `cwd` to the git repository that will be published\n\n\n**message**\n\nType: `String`\n\nThe commit message used when `git commit` is called\n\n\n**remoteName**\n\nType: `String`\n\nThe remote name of the git repository we are publishing to.  This would be one of the names displayed when `git remote -v show` is run.\n\n\n**remoteBranch**\n\nType: `String`\n\nThe name of the branch that we are publishing to, within the `remoteName` repository.\n\n\n\n\n## Usage Examples\n\n#### Documentation generation\nHere's a basic example of generating documentation for all the code in a project.  This would produce a tables of contents called\nreadme.md, and a folder called `lib` containing the documentation (and any subfolders):\n\n**GruntFile**\n\n```js\njsdox: {\n  generate: {\n    options: {\n      contentsTitle: 'My Project API Documentation',\n    },\n\n    src: ['lib/**/*.js'],\n    dest: 'docs/markdown'\n  }\n}\n```\n\n**Run the task**\n\n```shell\ngrunt jsdox:generate\n```\n\n\n\n#### Publishing to a git repo\nBefore running the publish task, a git repository with a remote must already be configured; all this thing does it run git commands, specifically in\nthe following order:\n\n1. git add .\n2. git commit -m <commit message>\n3. git push <remote> <branch>\n\nThis example assumes your github/bitbucket/whatever wiki is located in a docs/markdown subfolder.  In a real-world situation, your nested\ndocumentation folder _may also_ be a git repo, so running git commands against it require targetting that repo directly (otherwise git will target\nthe parent repo).  For example, running a simple ``git add .`` against a nested repo looks like:\n\n```shell\ngit --git-dir=docs/markdown/.git --work-tree=docs/markdown add .\n```\n\n``grunt-jsdox`` makes this assumption by default, so --git-dir and --work-tree are automatically set to ``dest`` when running the ``publish``\ntask.  Next, if a remote isn't configured already (run `git remote -v show` to see whats there), you need to configure one before continuing:\n\n```shell\ngit remote add <name> <git repo url>\n\nex:\ngit remote add upstream https://github.com/yourname/yourrepo.wiki.git\n```\n\n**GruntFile**\n\n```js\njsdox: {\n  generate: {\n    options: {\n      contentsTitle: 'My Project API Documentation',\n    },\n\n    src: ['lib/**/*.js'],\n    dest: 'docs/markdown'\n  },\n\n  publish: {\n    enabled: true,\n    path: '<%= jsdox.generate.dest %>',\n    message: 'Markdown Auto-Generated for version <%= pkg.version %>',\n    remoteName: 'upstream'\n  }\n}\n\n...\n\n//define a custom task to clean, generate, then publish\ngrunt.registerTask('generate-docs', ['clean:docs', 'jsdox:generate', 'jsdox:publish']);\n```\n\n**Run the task**\n\n```shell\ngrunt generate-docs\n```\n\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n_(Nothing yet)_\n",
  "readmeFilename": "README.md",
  "_id": "grunt-jsdox@0.1.4",
  "_from": "grunt-jsdox@"
}
